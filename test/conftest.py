import sys
import types

# –°–æ–∑–¥–∞—ë–º –∑–∞–≥–ª—É—à–∫–∏
fake = types.ModuleType("fake")
sys.modules["uiautomator2"] = fake
sys.modules["scr"] = fake
sys.modules["scr.core"] = fake
sys.modules["scr.core.VMware"] = types.ModuleType("scr.core.VMware")

# –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–∂–Ω—ã–π –∫–ª–∞—Å—Å‚Äë–∑–∞–≥–ª—É—à–∫—É
vsphere_manager_mod = types.ModuleType("scr.core.VMware.VSphereManager")
vsphere_manager_mod.VSphereManager = object

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –≤ sys.modules
sys.modules["scr.core.VMware.VSphereManager"] = vsphere_manager_mod

# –û—Å—Ç–∞–ª—å–Ω—ã–µ, –µ—Å–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã —Ä–∞–Ω–µ–µ
sys.modules["scr.GameTutorial"] = types.ModuleType("scr.GameTutorial")
sys.modules["scr.GameTutorial"].GameTutorial = object
sys.modules["scr.BlissInitSetup"] = types.ModuleType("scr.BlissInitSetup")
sys.modules["scr.BlissInitSetup"].BlisInitSetup = object


import asyncio
import pytest
from types import ModuleType, SimpleNamespace

from vm_refiller.pending_counter import pending


# üß™ –ú–æ–∫–∞–µ–º —Ç—è–∂—ë–ª—ã–µ/–≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (uiautomator2, ADB, scr)
_FAKE_MODULES = [
    "uiautomator2",
    "scr",
    "scr.BlissInitSetup",
    "scr.GameTutorial",
    "scr.core",
    "scr.core.VMware",
    "scr.core.VMware.BlissOSController",
]

@pytest.fixture(scope="session", autouse=True)
def _patch_optional_deps():
    fake_modules = [
        "uiautomator2",
        "scr",
        "scr.GameTutorial",
        "scr.BlissInitSetup",
        "scr.core",
        "scr.core.VMware",
        "scr.core.VMware.BlissOSController",
    ]

    for name in fake_modules:
        sys.modules.setdefault(name, types.ModuleType(name))


# üîÑ –°–±—Ä–æ—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—á—ë—Ç—á–∏–∫–∞ –ø–µ—Ä–µ–¥ –∏ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ —Ç–µ—Å—Ç–∞
@pytest.fixture(autouse=True)
def reset_pending():
    asyncio.get_event_loop().run_until_complete(pending.dec())
    yield
    asyncio.get_event_loop().run_until_complete(pending.dec())


# ü§ñ –ó–∞–≥–ª—É—à–∫–∞ –ø—É–ª–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ test_clone_worker, test_replenisher)
@pytest.fixture
def dummy_pool():
    """
    –ú–∏–Ω–∏-–∑–∞–≥–ª—É—à–∫–∞ VSpherePoolManager —Å–æ —Å–ø–∏—Å–∫–æ–º –≤—ã–∑–æ–≤–æ–≤ –∏ —Ñ–µ–π–∫–æ–≤—ã–º–∏ –º–µ—Ç–æ–¥–∞–º–∏.
    """
    calls = []

    def _rec(name):
        calls.append(name)

    dummy = SimpleNamespace(
        clone_vm=lambda *a, **kw: _rec("clone") or "vm",
        power_on_vm=lambda *a, **kw: _rec("power_on"),
        wait_for_vm_ready=lambda *a, **kw: _rec("wait_ip") or "10.0.0.1",
        restart_vm=lambda *a, **kw: _rec("restart"),
        power_off_vm=lambda *a, **kw: _rec("power_off"),
        mark_ready=lambda *a, **kw: _rec("mark_ready"),
        mark_fault=lambda *a, **kw: _rec("mark_fault"),
        list_fault_vms=lambda: [],
        delete_vm_by_name=lambda *_: None,
        count_ready=lambda: 0,
    )
    dummy._calls = calls
    return dummy
